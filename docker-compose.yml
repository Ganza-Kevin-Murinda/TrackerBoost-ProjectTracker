version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:16
    container_name: projecttracker-postgres
    environment:
      POSTGRES_DB: project_tracker
      POSTGRES_USER: ${PROD_DB_USERNAME}
      POSTGRES_PASSWORD: ${PROD_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - projecttracker
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${PROD_DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7.0
    container_name: projecttracker-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - projecttracker
    healthcheck:
      test: echo 'db.runCommand({ping:1})' | mongosh localhost:27017/project_tracker_audit --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8.0.2
    container_name: projecttracker-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - projecttracker
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Your Spring Boot Application
  project-tracker-app:
    build: .
    container_name: project-tracker-app
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SERVER_PORT: 8080

      # Database (prod profile)
      PROD_DB_URL: ${PROD_DB_URL}
      PROD_DB_USERNAME: ${PROD_DB_USERNAME}
      PROD_DB_PASSWORD: ${PROD_DB_PASSWORD}

      # Shared secrets
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - projecttracker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: projecttracker-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - projecttracker
    depends_on:
      - project-tracker-app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: projecttracker-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - projecttracker
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  projecttracker: